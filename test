<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automation Data</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>
    <h1>Automation Details</h1>
    <form id="folderForm">
        <label for="folderId">Enter Folder ID:</label>
        <input type="text" id="folderId" name="folderId">
        <input type="submit" value="Submit">
    </form>
    
    <table border="1">
        <thead>
            <tr>
                <th data-sort="Name">Name</th>
                <th data-sort="Description">Description</th>
                <th data-sort="CustomerKey">CustomerKey</th>
                <th data-sort="IsActive">IsActive</th>
                <th data-sort="CreatedDate">CreatedDate</th>
                <th data-sort="ModifiedDate">ModifiedDate</th>
                <th data-sort="Status">Status</th>
                <th data-sort="ProgramID">ProgramID</th>
                <th data-sort="CategoryID">CategoryID</th>
                <th data-sort="LastRunTime">LastRunTime</th>
                <th data-sort="ScheduledTime">ScheduledTime</th>
                <th data-sort="LastSaveDate">LastSaveDate</th>
                <th data-sort="ModifiedBy">ModifiedBy</th>
                <th data-sort="LastSavedBy">LastSavedBy</th>
                <th data-sort="CreatedBy">CreatedBy</th>
                <th data-sort="AutomationType">AutomationType</th>
                <th data-sort="RecurrenceID">RecurrenceID</th>
            </tr>
        </thead>
        <tbody id="automationData">
        </tbody>
    </table>

    <script runat="server">
        Platform.Load("Core", "1");
        var api = new Script.Util.WSProxy();

        function getStatusMeaning(status) {
            switch (status) {
                case -1: return "Not Run";
                case 0: return "Building";
                case 1: return "Ready";
                case 2: return "Running";
                case 3: return "Paused";
                case 4: return "Deactivated";
                case 5: return "Scheduled";
                case 6: return "Error";
                case 7: return "Building Error";
                case 8: return "Completed";
                default: return "Unknown";
            }
        }

        function retrieveAllAutomations(folderId, sortBy) {
            var out = [],
                moreData = true,
                reqID = data = null;

            var cols = [
                "Name",
                "Description",
                "CustomerKey",
                "IsActive",
                "CreatedDate",
                "ModifiedDate",
                "Status",
                "ProgramID",
                "CategoryID",
                "LastRunTime",
                "ScheduledTime",
                "LastSaveDate",
                "ModifiedBy",
                "LastSavedBy",
                "CreatedBy",
                "AutomationType",
                "RecurrenceID"
            ];

            var filter = {
                Property: 'Status',
                SimpleOperator: 'IN',
                Value: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]
            };

            if (folderId) {
                filter = {
                    Property: 'CategoryID',
                    SimpleOperator: 'equals',
                    Value: folderId
                };
            }

            var opts = {
                BatchSize: 300
            };

            var props = {
                QueryAllAccounts: false
            };

            while (moreData) {
                moreData = false;
                if (reqID) props.ContinueRequest = reqID;

                var data = api.retrieve("Automation", cols, filter, opts, props);
                if (data) {
                    moreData = data.HasMoreRows;
                    reqID = data.RequestID;
                    for (var i = 0; i < data.Results.length; i++) {
                        out.push(data.Results[i]);
                    }
                }
            }

            if (sortBy) {
                out.sort(function(a, b) {
                    return new Date(b[sortBy]) - new Date(a[sortBy]);
                });
            }

            return out;
        }

        var folderId = Platform.Request.GetQueryStringParameter("folderId");
        var sortBy = Platform.Request.GetQueryStringParameter("sortBy") || "ModifiedDate";
        var automations = retrieveAllAutomations(folderId, sortBy);
        var responseHtml = '';
        
        for (var i = 0; i < automations.length; i++) {
            var statusMeaning = getStatusMeaning(automations[i].Status);
            responseHtml += "<tr>";
            responseHtml += "<td>" + automations[i].Name + "</td>";
            responseHtml += "<td>" + automations[i].Description + "</td>";
            responseHtml += "<td>" + automations[i].CustomerKey + "</td>";
            responseHtml += "<td>" + automations[i].IsActive + "</td>";
            responseHtml += "<td>" + automations[i].CreatedDate + "</td>";
            responseHtml += "<td>" + automations[i].ModifiedDate + "</td>";
            responseHtml += "<td>" + statusMeaning + "</td>";
            responseHtml += "<td>" + automations[i].ProgramID + "</td>";
            responseHtml += "<td>" + automations[i].CategoryID + "</td>";
            responseHtml += "<td>" + automations[i].LastRunTime + "</td>";
            responseHtml += "<td>" + automations[i].ScheduledTime + "</td>";
            responseHtml += "<td>" + automations[i].LastSaveDate + "</td>";
            responseHtml += "<td>" + automations[i].ModifiedBy + "</td>";
            responseHtml += "<td>" + automations[i].LastSavedBy + "</td>";
            responseHtml += "<td>" + automations[i].CreatedBy + "</td>";
            responseHtml += "<td>" + automations[i].AutomationType + "</td>";
            responseHtml += "<td>" + automations[i].RecurrenceID + "</td>";
            responseHtml += "</tr>";
        }

        Platform.Response.Write('<!--#SET @output=' + responseHtml + '-->');
    </script>

    <script>
        $(document).ready(function() {
            $('#folderForm').submit(function(event) {
                event.preventDefault();
                var folderId = $('#folderId').val();
                $.ajax({
                    url: window.location.pathname,
                    type: 'get',
                    data: { folderId: folderId },
                    success: function(response) {
                        var parsedResponse = $(response).find('#automationData').html();
                        $('#automationData').html(parsedResponse);
                    }
                });
            });

            $('th').click(function() {
                var sortBy = $(this).data('sort');
                var folderId = $('#folderId').val();
                $.ajax({
                    url: window.location.pathname,
                    type: 'get',
                    data: { folderId: folderId, sortBy: sortBy },
                    success: function(response) {
                        var parsedResponse = $(response).find('#automationData').html();
                        $('#automationData').html(parsedResponse);
                    }
                });
            });
        });
    </script>

    %%=v(@output)=%%

</body>
</html>
